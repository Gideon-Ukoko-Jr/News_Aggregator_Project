definitions:
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Log in a user with credentials
      parameters:
      - description: User Login details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Log in a user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the given credentials
      parameters:
      - description: User registration details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Register a new user
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: 'error": "Invalid user ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error": "Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error": "Forbidden'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error": "User not found'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
swagger: "2.0"
